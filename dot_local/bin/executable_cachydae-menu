#!/usr/bin/env bash

export PATH="$HOME/.local/bin:$PATH"

# Set to true when going directly to a submenu, so we can exit directly
BACK_TO_EXIT=false

back_to() {
  local parent_menu="$1"

  if [[ "$BACK_TO_EXIT" == "true" ]]; then
    exit 0
  elif [[ -n "$parent_menu" ]]; then
    "$parent_menu"
  else
    show_main_menu
  fi
}

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-c" "$index")
    fi
  fi

  echo -e "$options" | launch-walker --dmenu --width 295 --minheight 1 --maxheight 600 -p "$prompt…" "${args[@]}" 2>/dev/null
}

terminal() {
  alacritty --class=Cachydae -e "$@"
}

present_terminal() {
  launch-floating-terminal-with-presentation "$1"
}

open_in_editor() {
  notify-send "Editing config file" "$1"
  launch-editor "$1"
}

install() {
  present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm $2"
}

install_and_launch() {
  present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm $2 && setsid gtk-launch $3"
}

install_terminal() {
  present_terminal "install-terminal $1"
}

aur_install() {
  present_terminal "echo 'Installing $1 from AUR...'; paru -S --noconfirm $2"
}

aur_install_and_launch() {
  present_terminal "echo 'Installing $1 from AUR...'; paru -S --noconfirm $2 && setsid gtk-launch $3"
}

show_trigger_menu() {
  case $(menu "Trigger" "  Capture\n  Share\n󰔎  Toggle") in
  *Capture*) show_capture_menu ;;
  *Share*) show_share_menu ;;
  *Toggle*) show_toggle_menu ;;
  *) show_main_menu ;;
  esac
}

show_capture_menu() {
  case $(menu "Capture" "  Screenshot\n  Screenrecord\n󰃉  Color") in
  *Screenshot*) show_screenshot_menu ;;
  *Screenrecord*) show_screenrecord_menu ;;
  *Color*) pkill hyprpicker || hyprpicker -a ;;
  *) show_trigger_menu ;;
  esac
}

show_screenshot_menu() {
  case $(menu "Screenshot" "  Region\n  Window\n  Display") in
  *Region*) cmd-screenshot ;;
  *Window*) cmd-screenshot window ;;
  *Display*) cmd-screenshot output ;;
  *) show_capture_menu ;;
  esac
}

show_screenrecord_menu() {
  case $(menu "Screenrecord" "  Region\n  Region + Audio\n  Display\n  Display + Audio\n  Display + Webcam") in
  *"Region + Audio"*) cmd-screenrecord region --with-audio ;;
  *Region*) cmd-screenrecord ;;
  *"Display + Audio"*) cmd-screenrecord output --with-audio ;;
  *"Display + Webcam"*) cmd-screenrecord output --with-audio --with-webcam ;;
  *Display*) cmd-screenrecord output ;;
  *) back_to show_capture_menu ;;
  esac
}

show_share_menu() {
  case $(menu "Share" "  Clipboard\n  File \n  Folder") in
  *Clipboard*) terminal bash -c "cmd-share clipboard" ;;
  *File*) terminal bash -c "cmd-share file" ;;
  *Folder*) terminal bash -c "cmd-share folder" ;;
  *) back_to show_trigger_menu ;;
  esac
}

show_toggle_menu() {
  case $(menu "Toggle" "󱄄  Screensaver\n󰔎  Nightlight\n󱫖  Idle Lock\n󰍜  Top Bar") in
  *Screensaver*) toggle-screensaver ;;
  *Nightlight*) toggle-nightlight ;;
  *Idle*) toggle-idle ;;
  *Bar*) toggle-waybar ;;
  *) show_trigger_menu ;;
  esac
}

show_style_menu() {
  case $(menu "Style" "󰸌  Theme\n  Font\n  Background\n  Hyprland\n󱄄  Screensaver\n  About") in
  *Theme*) show_theme_menu ;;
  *Font*) show_font_menu ;;
  *Background*) theme-bg-next ;;
  *) show_main_menu ;;
  esac
}

show_theme_menu() {
  theme=$(menu "Theme" "$(theme-list)" "" "$(theme-current)")
  if [[ "$theme" == "CNCLD" || -z "$theme" ]]; then
    back_to show_style_menu
  else
    theme-set "$theme"
  fi
}

show_font_menu() {
  theme=$(menu "Font" "$(font-list)" "--width 350" "$(font-current)")
  if [[ "$theme" == "CNCLD" || -z "$theme" ]]; then
    back_to show_style_menu
  else
    font-set "$theme"
  fi
}

show_setup_menu() {
  local options="  Audio\n  Wifi\n󰂯  Bluetooth\n󱐋  Power Profile"
  options="$options\n󰱔  DNS"

  case $(menu "Setup" "$options") in
  *Audio*) $TERMINAL --class=Wiremix -e wiremix ;;
  *Wifi*)
    rfkill unblock wifi
    launch-wifi
    ;;
  *Bluetooth*)
    rfkill unblock bluetooth
    launch-bluetooth
    ;;
  *Power*) show_setup_power_menu ;;
  *DNS*) present_terminal setup-dns ;;
  *) show_main_menu ;;
  esac
}

show_setup_power_menu() {
  profile=$(menu "Power Profile" "$(powerprofiles-list)" "" "$(powerprofilesctl get)")

  if [[ "$profile" == "CNCLD" || -z "$profile" ]]; then
    back_to show_setup_menu
  else
    powerprofilesctl set "$profile"
  fi
}


show_install_menu() {
  case $(menu "Install" "󰣇  Package\n󰣇  AUR\n  Web App\n  TUI\n  Service\n  Style\n󰵮  Development\n  Editor\n  Terminal\n󱚤  AI") in
  *Package*) terminal pkg-install ;;
  *Web*) present_terminal webapp-install ;;
  *AI*) show_install_ai_menu ;;
  *) show_main_menu ;;
  esac
}

show_install_ai_menu() {
  ollama_pkg=$(
    (command -v nvidia-smi &>/dev/null && echo ollama-cuda) ||
      (command -v rocminfo &>/dev/null && echo ollama-rocm) ||
      echo ollama
  )

  case $(menu "Install" "󱚤  Claude Code\n󱚤  Cursor CLI [AUR]\n󱚤  Gemini [AUR]\n󱚤  OpenAI Codex [AUR]\n󱚤  LM Studio\n󱚤  Ollama\n󱚤  Crush\n󱚤  opencode") in
  *Claude*) install "Claude Code" "claude-code" ;;
  *Cursor*) aur_install "Cursor CLI" "cursor-cli" ;;
  *OpenAI*) aur_install "OpenAI Codex" "openai-codex-bin" ;;
  *Gemini*) aur_install "Gemini" "gemini-cli" ;;
  *Studio*) install "LM Studio" "lmstudio" ;;
  *Ollama*) install "Ollama" "$ollama_pkg" ;;
  *Crush*) install "Crush" "crush-bin" ;;
  *opencode*) install "opencode" "opencode" ;;
  *) show_install_menu ;;
  esac
}

show_remove_menu() {
  case $(menu "Remove" "󰣇  Package\n  Web App") in
  *Package*) terminal pkg-remove ;;
  *Web*) present_terminal webapp-remove ;;
  *) show_main_menu ;;
  esac
}

show_update_menu() {
  case $(menu "Update" "  Process\n󰇅  Hardware\n  Firmware\n  Timezone") in
  *Process*) show_update_process_menu ;;
  *Hardware*) show_update_hardware_menu ;;
  *Firmware*) present_terminal update-firmware ;;
  *Timezone*) cmd-tzupdate ;;
  *) show_main_menu ;;
  esac
}

show_update_process_menu() {
  case $(menu "Restart" "  Hypridle\n  Hyprsunset\n  Swayosd\n󰌧  Walker\n󰍜  Waybar") in
  *Hypridle*) restart-hypridle ;;
  *Hyprsunset*) restart-hyprsunset ;;
  *Swayosd*) restart-swayosd ;;
  *Walker*) restart-walker ;;
  *Waybar*) restart-waybar ;;
  *) show_update_menu ;;
  esac
}

show_update_hardware_menu() {
  case $(menu "Restart" "  Audio\n󱚾  Wi-Fi\n󰂯  Bluetooth") in
  *Audio*) present_terminal restart-pipewire ;;
  *Wi-Fi*) present_terminal restart-wifi ;;
  *Bluetooth*) present_terminal restart-bluetooth ;;
  *) show_update_menu ;;
  esac
}

show_system_menu() {
  case $(menu "System" "  Lock\n󱄄  Screensaver\n󰤄  Suspend\n  Relaunch\n󰜉  Restart\n󰐥  Shutdown") in
  *Lock*) lock-screen ;;
  *Screensaver*) launch-screensaver force ;;
  *Suspend*) systemctl suspend ;;
  *Relaunch*) hyprctl dispatch exit ;;
  *Restart*) systemctl reboot --no-wall ;;
  *Shutdown*) systemctl poweroff --no-wall ;;
  *) back_to show_main_menu ;;
  esac
}

show_main_menu() {
  go_to_menu "$(menu "Go" "󰀻  Apps\n󰧑  Learn\n󱓞  Trigger\n  Style\n  Setup\n󰉉  Install\n󰭌  Remove\n  Update\n  About\n  System")"
}

go_to_menu() {
  case "${1,,}" in
  *apps*) walker -p "Launch…" ;;
  *trigger*) show_trigger_menu ;;
  *share*) show_share_menu ;;
  *style*) show_style_menu ;;
  *theme*) show_theme_menu ;;
  *screenshot*) show_screenshot_menu ;;
  *screenrecord*) show_screenrecord_menu ;;
  *setup*) show_setup_menu ;;
  *power*) show_setup_power_menu ;;
  *install*) show_install_menu ;;
  *remove*) show_remove_menu ;;
  *update*) show_update_menu ;;
  *system*) show_system_menu ;;
  esac
}

if [[ -n "$1" ]]; then
  BACK_TO_EXIT=true
  go_to_menu "$1"
else
  show_main_menu
fi
